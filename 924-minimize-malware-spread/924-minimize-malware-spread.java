class Solution {
    int[] parent,rank;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        parent = new int[graph.length];
        rank = new int[graph.length];
        
        for(int i=0;i<graph.length;i++){
            parent[i] = i;
            rank[i] = 0;
        }
        
        for(int u=0;u<graph.length;u++){
            for(int v=0;v<graph.length;v++){
                if(u!=v && graph[u][v] == 1){
                    int uLead = find(u);
                    int vLead = find(v);
                    
                    if(uLead != vLead){
                        union(uLead,vLead);
                    }
                }
            }
        }
        
        int[] size = new int[graph.length];
        int[] affectedCount = new int[graph.length];

        for(int v=0; v<graph.length;v++){
            int vLead = find(v);
            size[vLead] += 1;
        }
        for(int i : initial){
            int iLead = find(i);
            affectedCount[iLead] += 1;
        }
        
        int ans_size=0;
        int ans_idx=-1;
        for(int i : initial){
            int iLead = find(i);
            if(affectedCount[iLead]<2){
                if(ans_idx == -1){
                    ans_idx = i;
                    ans_size = size[iLead];
                }
                else if(size[iLead] > ans_size){
                    ans_size = size[iLead];
                    ans_idx = i;
                }
                else if(size[iLead] == ans_size){
                    if(i < ans_idx){
                        ans_idx = i;
                    }
                }    
            }
            
        }
        
        if(ans_idx == -1){
            int min_idx = initial[0];
            for(int i: initial){
                if(min_idx > i){
                    min_idx = i;
                }
            }
            ans_idx = min_idx;
        }
        
        return ans_idx;
    }
    
    
    int find(int x){
        if(parent[x] == x){
            return x;
        }
        else{
            parent[x] = find(parent[x]); 
            return parent[x];
        }
    }
    
    void union(int x , int y){
        if(rank[x] < rank[y]){
            parent[x] = y;
        }
        else if(rank[x] > rank[y]){
            parent[y] = x;
        }
        else{
            parent[x] = y;
            rank[y]++;
        }
    }
}